Certainly, Affan! Below are **10 simple and basic SQL DML (Data Manipulation Language)** queries using:

* **Joins (INNER, LEFT, RIGHT, FULL OUTER)**
* **Sub-queries (in `WHERE` and `FROM` clauses)**
* **Views**

Letâ€™s assume a simple **college database** with these 3 tables:

```sql
-- Students table
CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    name VARCHAR(50),
    class VARCHAR(10)
);

-- Exams table
CREATE TABLE Exams (
    exam_id INT PRIMARY KEY,
    subject VARCHAR(50),
    class VARCHAR(10)
);

-- Results table
CREATE TABLE Results (
    result_id INT PRIMARY KEY,
    student_id INT,
    exam_id INT,
    marks INT,
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (exam_id) REFERENCES Exams(exam_id)
);
```

---

### ðŸ”¸ 1. **INNER JOIN**: Get student names with their exam subjects and marks

```sql
SELECT s.name, e.subject, r.marks
FROM Students s
INNER JOIN Results r ON s.student_id = r.student_id
INNER JOIN Exams e ON r.exam_id = e.exam_id;
```

---

### ðŸ”¸ 2. **LEFT JOIN**: Get all students and their marks (if any)

```sql
SELECT s.name, r.marks
FROM Students s
LEFT JOIN Results r ON s.student_id = r.student_id;
```

---

### ðŸ”¸ 3. **RIGHT JOIN**: Get all exams and which students appeared

```sql
SELECT s.name, e.subject
FROM Results r
RIGHT JOIN Students s ON s.student_id = r.student_id
RIGHT JOIN Exams e ON r.exam_id = e.exam_id;
```

---

### ðŸ”¸ 4. **FULL OUTER JOIN (using UNION)**: All students and exams even if no match

```sql
SELECT s.name, e.subject
FROM Students s
LEFT JOIN Results r ON s.student_id = r.student_id
LEFT JOIN Exams e ON r.exam_id = e.exam_id

UNION

SELECT s.name, e.subject
FROM Students s
RIGHT JOIN Results r ON s.student_id = r.student_id
RIGHT JOIN Exams e ON r.exam_id = e.exam_id;
```

---

### ðŸ”¸ 5. **Subquery in WHERE clause**: Students who scored more than average

```sql
SELECT name
FROM Students
WHERE student_id IN (
    SELECT student_id
    FROM Results
    WHERE marks > (SELECT AVG(marks) FROM Results)
);
```

---

### ðŸ”¸ 6. **Subquery in FROM clause**: Get average marks per class

```sql
SELECT class, AVG(marks) AS avg_marks
FROM (
    SELECT s.class, r.marks
    FROM Students s
    JOIN Results r ON s.student_id = r.student_id
) AS class_marks
GROUP BY class;
```

---

### ðŸ”¸ 7. **VIEW creation**: Students with their marks

```sql
CREATE VIEW StudentMarks AS
SELECT s.name, e.subject, r.marks
FROM Students s
JOIN Results r ON s.student_id = r.student_id
JOIN Exams e ON r.exam_id = e.exam_id;
```

---

### ðŸ”¸ 8. **Using the VIEW**: Get students who scored above 80

```sql
SELECT * FROM StudentMarks
WHERE marks > 80;
```

---

### ðŸ”¸ 9. **Update with JOIN**: Increase marks by 5 for class 'FY'

```sql
UPDATE Results r
JOIN Students s ON r.student_id = s.student_id
SET r.marks = r.marks + 5
WHERE s.class = 'FY';
```

---

### ðŸ”¸ 10. **Delete using sub-query**: Remove students who never appeared in any exam

```sql
DELETE FROM Students
WHERE student_id NOT IN (
    SELECT DISTINCT student_id FROM Results
);
```

---

Let me know if you want this based on **another domain** (e.g., hospital, e-commerce, library), or want the **ER diagram** or **insert sample data** too.
